Implement binary search in a rotated array (ex. {5,6,7,8,1,2,3})
Reverse a String iteratively and recursively
Find the minimum element in a stack in O(1) time
Print the coordinates of every node in a binary tree, where root is 0,0
Implement a stack with push and pop functions
Check whether a link list is a palindrome
Find the common elements of 2 int arrays
Find the 2nd largest number in a BST
Given a function rand5() that returns a random int between 0 and 5, implement rand7()
Write a function that determines if a tree is a BST
Find the shortest palindrome in a String
Print all permutations of a String
Print a tree by levels
Print a tree using BFS and DFS
Find pairs in an integer array whose sum is equal to 10 (bonus: do it in linear time)
Write fibbonaci iteratively and recursively (bonus: use dynamic programming)
Given a binary tree which is a sum tree (child nodes add to parent), write an algorithm to determine whether the tree is a valid sum tree
Reverse a linked list iteratively and recursively
Given a 2D array of 1s and 0s, count the number of "islands of 1s" (e.g. groups of connecting 1s)
Find the Nth element in a linked list
Implement binary search of a sorted array of integers
Write a multiply function that multiples 2 integers without using *
Given a tree, verify that it contains a subtree.
Construct a BST given the pre-order and in-order traversal Strings
Write a function that sorts a stack (bonus: sort the stack in place without extra memory)
Find the most frequent integer in an array
Find the only element in an array that only occurs once.
Remove the Nth element of a linked list
Check if a linked list has cycles
Find the smallest element in a BST
Use dynamic programming to find the first X prime numbers
Implement a queue with queue and dequeue functions
Given a circular linked list, find the node at the beginning of the loop. Example: A-->B-->C --> D-->E -->C, C is the node that begins the loop
Implement a linked list (with insert and delete functions)
Find the max distance between 2 nodes in a BST.
Given a binary tree which is a sum tree, write an algorithm to determine whether the tree is a valid sum tree
Given 2 integer arrays, determine of the 2nd array is a rotated version of the 1st array. Ex. Original Array A={1,2,3,5,6,7,8} Rotated Array B={5,6,7,8,1,2,3}
Implement an exponent function (bonus: now try in log(n) time)
Find the first non-repeated character in a String
Implement a queue using 2 stacks
Implement a binary min heap. Turn it into a binary max heap
Find the distance between 2 nodes in a BST and a normal binary tree
Check if a String is composed of all unique characters
Determine if a String is an int or a double
Given a single-line text String and a maximum width value, write the function 'String justify(String text, int maxWidth)' that formats the input text using full-justification, i.e., extra spaces on each line are equally distributed between the words; the first word on each line is flushed left and the last word on each line is flushed right
Implement a BST with insert and delete functions
Check if String is a palindrome
Determine if 2 Strings are anagrams
Implement squareroot function
Write a function that prints out the binary form of an int
Implement parseInt
